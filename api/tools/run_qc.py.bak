import os
import subprocess
import sys

from tools.qc.scanpy_qc import run_scanpy_qc
from tools.qc.dropkick_qc import run_dropkick_qc
from tools.qc.seurat_qc import run_seurat_qc
from tools.qc.scrublet_calls import predict_scrublet
# sys.path.append('..')
from tools.formating.formating import *
from config.celery_utils import get_input_path, get_output
from utils.unzip import unzip_file_if_compressed
# from utils.mongodb import db
from starlette.responses import JSONResponse
from fastapi import HTTPException, Body, APIRouter, status
from utils.redislogger import *
from utils.mongodb import benchmarks, userdatasets, pp_results 


def run_qc(task_id, dataset, input_path, userID, output, methods, min_genes, max_genes, min_cells, target_sum, n_top_genes, n_neighbors, n_pcs, resolution, doublet_rate, regress_cell_cycle=False, use_default=True, random_state=0, assay='RNA', idtype='SYMBOL', colour_by='NULL', shape_by_1='NULL', shape_by_2='NULL', show_error=True):
    results = []
    md5 = get_md5(input_path)
    
    input_path = unzip_file_if_compressed(input_path)
    if input_path is None:
        return None

    pp_stage = "Raw"
    method_id = None
    if max_genes == 20000:
        max_genes = None
    if n_pcs == 0:
        n_pcs = None
    if assay is None:
        assay = 'RNA'
    
    parameters = {
            "assay": assay,
            "min_genes": min_genes, # default: 200, step: 25, range: [0, 20000], scale: 200(default), 1000, 5000, 10000, 15000, 20000(No limit)
            "max_genes": max_genes, # default: 20000(=No limit, default), step: 25, range: [0, 20000], scale: 200, 1000, 5000, 10000, 15000, 20000(=No limit, default)
            "min_cells": min_cells, # default: 2, step:1, range: [1, 200], scale: 2(default), 10, 50, 100, 200
            # "max_cells": max_cells,
            "target_sum": target_sum, # default: 0(None), step: 1e4, range:[0, 1e6], scale: 0(None, default), 1e4, 1e5, 1e6
            "n_top_genes": n_top_genes, # highly variable genes:  default: 2000, step:25, range: [100, 10000], scale: 500, 1000, 2000(default), 5000, 10000
            "n_neighbors": n_neighbors, # default: 15, step:1, range: [2, 100], scale: 1, 5, 10, 15(default), 20, 50, 100
            "n_pcs": n_pcs, # default: 0(None), step:1, range: [0, 200], scale: 0(None, default), 5, 10, 20, 40, 50, 125, 200 
            "resolution": resolution, # default: 1, step:0.05, range: [0, 5], scale: 0, 0.1, 0.25, 0.5, 1(default), 2.5, 5
            "doublet_rate": doublet_rate, # default: 0.08, step:0.001, range: [0, 0.5], scale: 0, 0.8%, 2.3%, 3.8%, 4.6%, 6.1%, 8%(default), 12.5%, 20_, 50% Please show the scale in the form of percentage
            "regress_cell_cycle": regress_cell_cycle, # default: false, values: [true, false]
            "use_default": use_default # default: true, values: [true, false]
        }
    redislogger.info(task_id, f"Using QC Parameters: {parameters}")
    
    if methods is None: # Benchmarks, because benchmarks does not have method paramter
        if input_path.endswith('.h5Seurat') or input_path.endswith('.h5seurat') or input_path.endswith('.rds') or input_path.endswith(".Robj"):
            # It's an H5Seurat or RDS file, call runQCSeurat method
            redislogger.info(task_id, "Start Seurat Benchmark QC...")
            # default_assay, assay_names, adata_path, adata, output, ddl_assay_names = run_seurat_qc(input_path, unique_id, assay=assay, min_genes=200, max_genes=0, min_UMI_count=2, max_UMI_count=0, percent_mt_max=5, percent_rb_min=0, resolution=0.5, dims=10, doublet_rate=0.075, regress_cell_cycle=False)
            try:
                default_assay, assay_names, output, adata_path, adata, ddl_assay_names= run_seurat_qc(input_path, task_id, assay=assay, min_genes=min_genes, max_genes=max_genes, min_UMI_count=min_cells, max_UMI_count=0, percent_mt_max=5, percent_rb_min=0, resolution=resolution, dims=n_neighbors, n_pcs=n_pcs, doublet_rate=doublet_rate, regress_cell_cycle=regress_cell_cycle)
                
                if ddl_assay_names:
                    results.append({
                        "inputfile": input_path,
                        "format": "h5seurat",
                        "default_assay": default_assay,
                        "assay_names": assay_names,
                        "ddl_assay_names": ddl_assay_names
                    })

                    return results
                redislogger.info(task_id, "Retrieving metadata and embeddings from AnnData object.")
                info, layers, cell_metadata_obs, gene_metadata, nCells, nGenes, genes, cells, embeddings, umap_plot, umap_plot_3d, violin_plot, scatter_plot, highest_expr_genes_plot = get_metadata_from_anndata(adata)

                if(use_default):
                    method_id = "seurat_qc"
                else:
                    method_id = f"seurat_qc-{assay}-{min_genes}-{max_genes}-{min_cells}-{n_top_genes}-{doublet_rate}-{n_neighbors}-{resolution}-{regress_cell_cycle}"

                pp_results = {
                    "stage": pp_stage,
                    "process": "QC",
                    "task_id": task_id,
                    "method": "seurat",
                    "process_id": process_id,
                    "parameters": parameters,
                    "adata_path": adata_path,
                    "seurat_path": output
                }

                # Return metadata in the API response
                metadata =  {
                    "layers": layers,
                    "cell_metadata_obs": cell_metadata_obs.to_dict(),
                    "gene_metadata": gene_metadata.to_dict(),
                    "nCells": nCells,
                    "nGenes": nGenes,
                    "genes": genes,
                    "cells": cells,
                    "embeddings": embeddings
                }
                if assay_names is None:
                    assay_names = []
                
                results.append({
                        "inputfile": input_path,
                        "info": info,
                        "format": "h5ad",
                        "default_assay": default_assay,
                        "assay_names": assay_names,
                        "adata_path": adata_path,
                        "output": output,
                        "umap_plot": umap_plot,
                        "umap_plot_3d": umap_plot_3d,
                        "violin_plot": violin_plot,
                        "scatter_plot": scatter_plot,
                        "highest_expr_genes_plot": highest_expr_genes_plot,
                        "md5": md5,
                        "metadata": metadata,
                        "pp_results": pp_results,
                        "message": "Quality control completed successfully."
                    })               
            except Exception as e:
                detail = f"Error during Seurat QC: {str(e)}"
                redislogger.error(task_id, detail)
                raise HTTPException(
                    status_code = status.HTTP_500_INTERNAL_SERVER_ERROR,
                    detail = detail
                )
        else:
            redislogger.info(task_id, "Start scanpy Benchmark QC...")
            # Load the annData object
            adata = load_anndata(input_path)

            # Run Scanpy QC
            try:
                # scanpy_results = run_scanpy_qc(adata,unique_id, min_genes=min_genes, max_genes=max_genes, min_cells=2, target_sum=1e4, n_top_genes=None, n_neighbors=15, n_pcs=None, resolution=1, expected_doublet_rate=doublet_rate, regress_cell_cycle=False, random_state=0)
                scanpy_results = run_scanpy_qc(adata, task_id, min_genes=min_genes, max_genes=max_genes, min_cells=min_cells, target_sum=target_sum, n_top_genes=n_top_genes, n_neighbors=n_neighbors, n_pcs=n_pcs, resolution=resolution, expected_doublet_rate=doublet_rate, regress_cell_cycle=regress_cell_cycle, random_state=0)
                redislogger.info(task_id, "Retrieving metadata and embeddings from AnnData object.")
                info, layers, cell_metadata_obs, gene_metadata, nCells, nGenes, genes, cells, embeddings, umap_plot, umap_plot_3d, violin_plot, scatter_plot, highest_expr_genes_plot = get_metadata_from_anndata(scanpy_results)
                redislogger.info(task_id, "Saving AnnData object.")
                adata_path = change_file_extension(input_path, 'h5ad')
                scanpy_results.write_h5ad(adata_path, compression='gzip')

                if(use_default):
                    method_id = "scanpy_qc"
                else:
                    method_id = f"scanpy_qc-{min_genes}-{max_genes}-{min_cells}-{target_sum}-{n_top_genes}-{doublet_rate}-{n_neighbors}-{n_pcs}-{resolution}-{regress_cell_cycle}"

                pp_results = {
                    "stage": pp_stage,
                    "process": "QC",
                    "task_id": task_id,
                    "method": "scanpy",
                    "process_id": process_id,
                    "parameters": parameters,
                    "adata_path": adata_path
                }

                # Return metadata in the API response
                metadata =  {
                    "layers": layers,
                    "cell_metadata_obs": cell_metadata_obs.to_dict(),
                    "gene_metadata": gene_metadata.to_dict(),
                    "nCells": nCells,
                    "nGenes": nGenes,
                    "genes": genes,
                    "cells": cells,
                    "embeddings": embeddings
                }
                
                results.append({
                    "inputfile": input_path,
                    "info": info,
                    "format": "h5ad",
                    "adata_path": adata_path,
                    "umap_plot": umap_plot,
                    "umap_plot_3d": umap_plot_3d,
                    "violin_plot": violin_plot,
                    "scatter_plot": scatter_plot,
                    "highest_expr_genes_plot": highest_expr_genes_plot,
                    "md5": md5,
                    "metadata": metadata,
                    "pp_results": pp_results,
                    "message": "Quality control completed successfully."
                    
                })
            except Exception as e:
                detail = f"Error during scanpy QC: {str(e)}"
                redislogger.error(task_id, detail)
                raise HTTPException(
                    status_code = status.HTTP_500_INTERNAL_SERVER_ERROR,
                    detail = detail
                )
        return results
    # Get the absolute path for the given output
    output = get_output(output, userID, task_id) # Tools

    if methods is None: # Benchmarks, because benchmarks does not have method paramter
        if input_path.endswith('.h5Seurat') or input_path.endswith('.h5seurat') or input_path.endswith('.rds') or input_path.endswith(".Robj"):
            methods = ["Seurat"]
        else:
            methods = ["scanpy"]
        output = input_path # Benchmarks


    # Get the absolute path for the given input
    # input = get_input_path(input, userID)
    # Get the absolute path for the given output
    methods = [x.upper() for x in methods if isinstance(x,str)]

    if "SCANPY" in methods or "DROPKICK" in methods:
        adata = load_anndata(input)
        # Scanpy QC
        if "SCANPY" in methods:
            # Run Scanpy QC
            try:
                redislogger.info(task_id, "Start scanpy QC...")
                # scanpy_results = run_scanpy_qc(adata,unique_id, min_genes=min_genes, max_genes=max_genes, min_cells=2, target_sum=1e4, n_top_genes=None, n_neighbors=15, n_pcs=None, resolution=1, expected_doublet_rate=doublet_rate, regress_cell_cycle=False, random_state=0)
                scanpy_results = run_scanpy_qc(adata, task_id, min_genes=min_genes, max_genes=max_genes, min_cells=min_cells, target_sum=target_sum, n_top_genes=n_top_genes, n_neighbors=n_neighbors, n_pcs=n_pcs, resolution=resolution, expected_doublet_rate=doublet_rate,regress_cell_cycle=regress_cell_cycle, random_state=0)
                redislogger.info(task_id, "Retrieving metadata and embeddings from AnnData object.")
                info, layers, cell_metadata_obs, gene_metadata, nCells, nGenes, genes, cells, embeddings, umap_plot, umap_plot_3d, violin_plot, scatter_plot, highest_expr_genes_plot = get_metadata_from_anndata(scanpy_results)
                redislogger.info(task_id, "Saving AnnData object.")
                output_path = get_output_path(output, dataset, method='scanpy')
                scanpy_results.write_h5ad(output_path, compression='gzip')

                if(use_default):
                    method_id = "scanpy_qc"
                else:
                    method_id = f"scanpy_qc-{min_genes}-{max_genes}-{min_cells}-{target_sum}-{n_top_genes}-{doublet_rate}-{n_neighbors}-{n_pcs}-{resolution}-{regress_cell_cycle}"

                pp_results = {
                    "stage": pp_stage,
                    "process": "QC",
                    "task_id": task_id,
                    "method": "scanpy",
                    "process_id": process_id,
                    "parameters": parameters,
                    "adata_path": output_path
                }

                # Return metadata in the API response
                metadata =  {
                    "layers": layers,
                    "cell_metadata_obs": cell_metadata_obs.to_dict(),
                    "gene_metadata": gene_metadata.to_dict(),
                    "nCells": nCells,
                    "nGenes": nGenes,
                    "genes": genes,
                    "cells": cells,
                    "embeddings": embeddings
                }
                
                results.append({
                    "inputfile": input_path,
                    "info": info,
                    "format": "h5ad",
                    "adata_path": output_path,
                    "umap_plot": umap_plot,
                    "umap_plot_3d": umap_plot_3d,
                    "violin_plot": violin_plot,
                    "scatter_plot": scatter_plot,
                    "highest_expr_genes_plot": highest_expr_genes_plot,
                    "md5": md5,
                    "metadata": metadata,
                    "pp_results": pp_results,
                    "message": "Quality control completed successfully."
                    
                })
            except Exception as e:
                detail = f"Error during scanpy QC: {str(e)}"
                redislogger.error(task_id, detail)
                raise HTTPException(
                    status_code = status.HTTP_500_INTERNAL_SERVER_ERROR,
                    detail = detail
                )       

        # Dropkick QC
        elif "DROPKICK" in methods:           
            try:
                redislogger.info(task_id, "Start Dropkick QC...")
                dropkick_results = run_dropkick_qc(adata, task_id, n_neighbors=n_neighbors, n_pcs=n_pcs, resolution=resolution, random_state=random_state)
                redislogger.info(task_id, "Retrieving metadata and embeddings from AnnData object.")
                info, layers, cell_metadata_obs, gene_metadata, nCells, nGenes, genes, cells, embeddings, umap_plot, umap_plot_3d, violin_plot, scatter_plot, highest_expr_genes_plot = get_metadata_from_anndata(scanpy_results)
                redislogger.info(task_id, "Saving AnnData object.")
                output_path = get_output_path(output, dataset, method='dropkick')
                dropkick_results.write_h5ad(output_path, compression='gzip')

                if(use_default):
                    method_id = "dropkick_qc"
                else:
                    method_id = f"dropkick_qc-{n_neighbors}-{n_pcs}-{resolution}"

                pp_results = {
                    "stage": pp_stage,
                    "process": "QC",
                    "task_id": task_id,
                    "method": "dropkick",
                    "process_id": process_id,
                    "parameters": parameters,
                    "adata_path": output_path
                }

                # Return metadata in the API response
                metadata =  {
                    "layers": layers,
                    "cell_metadata_obs": cell_metadata_obs.to_dict(),
                    "gene_metadata": gene_metadata.to_dict(),
                    "nCells": nCells,
                    "nGenes": nGenes,
                    "genes": genes,
                    "cells": cells,
                    "embeddings": embeddings
                }
                
                results.append({
                    "inputfile": input_path,
                    "info": info,
                    "format": "h5ad",
                    "adata_path": output_path,
                    "umap_plot": umap_plot,
                    "umap_plot_3d": umap_plot_3d,
                    "violin_plot": violin_plot,
                    "scatter_plot": scatter_plot,
                    "highest_expr_genes_plot": highest_expr_genes_plot,
                    "md5": md5,
                    "metadata": metadata,
                    "pp_results": pp_results,
                    "message": "Quality control completed successfully."
                    
                })
            except Exception as e:
                detail = f"Error during Dropkick QC: {str(e)}"
                redislogger.error(task_id, detail)
                raise HTTPException(
                    status_code = status.HTTP_500_INTERNAL_SERVER_ERROR,
                    detail = detail
                )

    # Seurat QC
    elif "SEURAT" in methods:
        # try:
        #     path_of_scrublet_calls = predict_scrublet(input)
        #     output_path = get_output_path(output, dataset, method='Seurat', format='Seurat')
        #     report_path = get_report_path(dataset, output_path, "Seurat")
            
        #     # Get the absolute path of the current file
        #     current_file = os.path.abspath(__file__)

        #     # Construct the relative path to the desired file
        #     relative_path = os.path.join(os.path.dirname(current_file), 'qc', 'seurat_qc.Rmd')

        #     # Get the absolute path of the desired file
        #     seurat_path = os.path.abspath(relative_path)
        #     # seurat_path = os.path.abspath("seurat_qc.Rmd")
        #     s = subprocess.call(["R -e \"rmarkdown::render('" + seurat_path + "', params=list(dataset='" + str(dataset) + "', input='" + input + "', default_assay='" + default_assay + "', output='" + output_path + "', output_format='Seurat', path_of_scrublet_calls='" + path_of_scrublet_calls + "'), output_file='" + report_path + "')\""], shell = True)
        #     print(s)
        # except Exception as e:
        #     print("Seurat QC is failed")
        #     if show_error: print(e)
        # default_assay, assay_names, adata_path, adata, output, ddl_assay_names = run_seurat_qc(input_path, unique_id, assay=assay, min_genes=200, max_genes=0, min_UMI_count=2, max_UMI_count=0, percent_mt_max=5, percent_rb_min=0, resolution=0.5, dims=10, doublet_rate=0.075, regress_cell_cycle=False)
        try:
            redislogger.info(task_id, "Start Seurat QC...")
            output_path = get_output_path(output, dataset, method='Seurat', format='Seurat')
            default_assay, assay_names, output, adata_path, adata, ddl_assay_names= run_seurat_qc(input_path, task_id, output=output_path, assay=assay, min_genes=min_genes, max_genes=max_genes, min_UMI_count=min_cells, max_UMI_count=0, percent_mt_max=5, percent_rb_min=0, resolution=resolution, dims=n_neighbors, n_pcs=n_pcs, doublet_rate=doublet_rate, regress_cell_cycle=regress_cell_cycle)
            
            if ddl_assay_names:
                results.append({
                    "inputfile": input_path,
                    "format": "h5seurat",
                    "default_assay": default_assay,
                    "assay_names": assay_names,
                    "ddl_assay_names": ddl_assay_names
                })

                return results
            redislogger.info(task_id, "Retrieving metadata and embeddings from AnnData object.")
            info, layers, cell_metadata_obs, gene_metadata, nCells, nGenes, genes, cells, embeddings, umap_plot, umap_plot_3d, violin_plot, scatter_plot, highest_expr_genes_plot = get_metadata_from_anndata(adata)

            if(use_default):
                method_id = "seurat_qc"
            else:
                method_id = f"seurat_qc-{assay}-{min_genes}-{max_genes}-{min_cells}-{n_top_genes}-{doublet_rate}-{n_neighbors}-{resolution}-{regress_cell_cycle}"

            pp_results = {
                "stage": pp_stage,
                "process": "QC",
                "task_id": task_id,
                "method": "seurat",
                "process_id": process_id,
                "parameters": parameters,
                "adata_path": adata_path,
                "seurat_path": output
            }

            # Return metadata in the API response
            metadata =  {
                "layers": layers,
                "cell_metadata_obs": cell_metadata_obs.to_dict(),
                "gene_metadata": gene_metadata.to_dict(),
                "nCells": nCells,
                "nGenes": nGenes,
                "genes": genes,
                "cells": cells,
                "embeddings": embeddings
            }
            if assay_names is None:
                assay_names = []
            
            results.append({
                    "inputfile": input_path,
                    "info": info,
                    "format": "h5ad",
                    "default_assay": default_assay,
                    "assay_names": assay_names,
                    "adata_path": adata_path,
                    "output": output,
                    "umap_plot": umap_plot,
                    "umap_plot_3d": umap_plot_3d,
                    "violin_plot": violin_plot,
                    "scatter_plot": scatter_plot,
                    "highest_expr_genes_plot": highest_expr_genes_plot,
                    "md5": md5,
                    "metadata": metadata,
                    "pp_results": pp_results,
                    "message": "Quality control completed successfully."
                })               
        except Exception as e:
            detail = f"Error during Seurat QC: {str(e)}"
            redislogger.error(task_id, detail)
            raise HTTPException(
                status_code = status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail = detail
            )

    # Bioconductor QC
    elif "BIOCONDUCTOR" in methods:
        try:
            redislogger.info(task_id, "Start Bioconductor QC...")
            output_path = get_output_path(output, dataset, method='Bioconductor', format='SingleCellExperiment')
            adata_path = get_output_path(output, dataset, method='Bioconductor', format='AnnData')
            report_path = get_report_path(dataset, output_path, "Bioconductor")

            # Get the absolute path of the current file
            current_file = os.path.abspath(__file__)

            # Construct the relative path to the desired file
            relative_path = os.path.join(os.path.dirname(current_file), 'qc', 'bioconductor_qc.Rmd')

            # Get the absolute path of the desired file
            bioconductor_path = os.path.abspath(relative_path)
            
            # bioconductor_path = os.path.abspath("qc/bioconductor_qc.Rmd")
            s = subprocess.call([f"R -e \"rmarkdown::render('{bioconductor_path}', params=list(dataset='{dataset}', input_path='{input_path}', idtype='{idtype}', colour_by='{colour_by}', shape_by_1='{shape_by_1}', shape_by_2='{shape_by_2 }', output='{output_path}', adata_path='{adata_path}', output_format='SingleCellExperiment'), output_file='{report_path}')\""], shell = True)
            redislogger.info(task_id, s)

            if os.path.exists(adata_path):
                redislogger.info(task_id, "Adding 3D UMAP to AnnData object.")
                adata = load_anndata(adata_path)
                sc.pp.neighbors(adata, n_neighbors=n_neighbors, n_pcs=n_pcs, random_state=0)
                adata_3D = sc.tl.umap(adata, random_state=0, 
                                init_pos="spectral", n_components=3, 
                                copy=True, maxiter=None)
                adata.obsm["X_umap_3D"] = adata_3D.obsm["X_umap"]
                adata.write_h5ad(adata_path, compression='gzip')
                adata_3D = None
            else:
                raise ValueError("AnnData file does not exist due to the failure of Bioconductor QC.")
            
            redislogger.info(task_id, "Retrieving metadata and embeddings from AnnData object.")
            info, layers, cell_metadata_obs, gene_metadata, nCells, nGenes, genes, cells, embeddings, umap_plot, umap_plot_3d, violin_plot, scatter_plot, highest_expr_genes_plot = get_metadata_from_anndata(adata)

            if(use_default):
                method_id = "bioconductor_qc"
            else:
                method_id = f"bioconductor_qc-{n_neighbors}-{resolution}"

            pp_results = {
                "stage": pp_stage,
                "process": "QC",
                "task_id": task_id,
                "method": "bioconductor",
                "process_id": process_id,
                "parameters": parameters,
                "adata_path": adata_path,
                "sce_path": output_path
            }

            # Return metadata in the API response
            metadata =  {
                "layers": layers,
                "cell_metadata_obs": cell_metadata_obs.to_dict(),
                "gene_metadata": gene_metadata.to_dict(),
                "nCells": nCells,
                "nGenes": nGenes,
                "genes": genes,
                "cells": cells,
                "embeddings": embeddings
            }
            if assay_names is None:
                assay_names = []
            
            results.append({
                    "inputfile": input_path,
                    "info": info,
                    "format": "h5ad",
                    "default_assay": default_assay,
                    "assay_names": assay_names,
                    "adata_path": adata_path,
                    "output": output,
                    "umap_plot": umap_plot,
                    "umap_plot_3d": umap_plot_3d,
                    "violin_plot": violin_plot,
                    "scatter_plot": scatter_plot,
                    "highest_expr_genes_plot": highest_expr_genes_plot,
                    "md5": md5,
                    "metadata": metadata,
                    "pp_results": pp_results,
                    "message": "Quality control completed successfully."
                })               
        
        except Exception as e:
            detail = f"Error during Bioconductor QC: {str(e)}"
            redislogger.error(task_id, detail)
            raise HTTPException(
                status_code = status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail = detail
            )

    return results